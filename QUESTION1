#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define SIZE 24        
#define nRows 8         
#define nCols 3          

// Function prototypes
void print_array(int array[], int length);                // Function to print a 1D array
void print_matrix(int mat[][nCols], int rows);           // Function to print a 2D array
bool isValid(const int arr[], int length, int pos);      // Function to check if a position is valid
void remove_element(int arr[], int length, int pos);     // Function to remove an element from the array
void insert_element(int arr[], int length, int pos, int value); // Function to insert an element into the array
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]); // Function to reshape a 1D array into a 2D array


int main() {
    int arr[SIZE] = {10, 20, 30, 40, 50, 10, 10, 20, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190}; // Initialize the array
    int arr2d[nRows][nCols];                               // Declare a 2D array for reshaping

    // Testing remove_element
    printf("Original array:\n");
    print_array(arr, SIZE);                                 // Print the original array
    remove_element(arr, SIZE, 2);                          // Remove the element at index 2
    printf("Array after removing element at index 2:\n");
    print_array(arr, SIZE - 1);                            // Print the modified array

    // Testing insert_element
    insert_element(arr, SIZE - 1, 2, 80);                  // Insert 80 at index 2
    printf("Array after inserting 80 at index 2:\n");
    print_array(arr, SIZE);                                 // Print the modified array

    // Testing reshape
    reshape(arr, SIZE, nRows, nCols, arr2d);              // Reshape the 1D array into a 2D array
    printf("2D array after reshaping:\n");
    print_matrix(arr2d, nRows);                            // Print the reshaped 2D array

    // Testing transpose
    int transposed[nCols][nRows];                          // Declare a 2D array for the transposed matrix
    trans_matrix(nRows, nCols, arr2d, transposed);        // Transpose the 2D array
    printf("Transposed matrix:\n");
    print_matrix(transposed, nCols);                       // Print the transposed matrix

    // Testing found_duplicate
    bool hasDuplicates = found_duplicate(arr, SIZE);       // Check if there are duplicates in the array
    printf("Array has duplicates: %s\n", hasDuplicates ? "true" : "false"); // Print the result

    return 0;                                              // Exit the program
}

// Function definitions
// Check if the given position is valid (within the bounds of the array)
bool isValid(const int arr[], int length, int pos) {
    return pos >= 0 && pos < length; // Return true if pos is valid
}

// Remove an element from the array at the specified position
void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Error: Invalid position %d for removal.\n", pos); // Print an error if pos is invalid
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1]; // Shift elements left to fill the gap
    }
}

// Insert a value into the array at the specified position
void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length, pos) || length >= SIZE) {
        printf("Error: Invalid position %d for insertion.\n", pos); // Print an error if pos is invalid or array is full
        return;
    }
    for (int i = length; i > pos; i--) {
        arr[i] = arr[i - 1]; // Shift elements right to make space
    }
    arr[pos] = value; // Insert the new value
}

// Reshape a 1D array into a 2D array of specified dimensions
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error: The length of array is not equal to nRows * nCols.\n"); // Print an error if dimensions don't match
        return;
    }
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[col * nRows + row]; // Fill the 2D array column-wise
        }
    }
}

