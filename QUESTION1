#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define SIZE 24
#define nRows 8
#define nCols 3

// Function prototypes
void print_array(int array[], int length);
void print_matrix(int matrix[][nCols], int rows);
bool isValid(const int array[], int length, int position);
void remove_element(int array[], int length, int position);
void insert_element(int array[], int length, int position, int value);
void reshape(const int array[], int length, int numRows, int numCols, int reshapedMatrix[numRows][numCols]);
void trans_matrix(int numRows, int numCols, const int matrix[numRows][numCols], int transposedMatrix[numCols][numRows]);
bool found_duplicate(int array[], int length);

int main() {
    int array[SIZE] = {10, 20, 30, 40, 50, 10, 10, 20, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190};
    int reshapedArray[nRows][nCols];

    // Testing remove_element
    printf("Initial array:\n");
    print_array(array, SIZE);
    remove_element(array, SIZE, 2);
    printf("Array after removing element at position 2:\n");
    print_array(array, SIZE - 1);

    // Testing insert_element
    insert_element(array, SIZE - 1, 2, 80);
    printf("Array after inserting 80 at position 2:\n");
    print_array(array, SIZE);

    // Testing reshape
    reshape(array, SIZE, nRows, nCols, reshapedArray);
    printf("Reshaped to 2D array:\n");
    print_matrix(reshapedArray, nRows);

    // Testing trans_matrix
    int transposedArray[nCols][nRows];
    trans_matrix(nRows, nCols, reshapedArray, transposedArray);
    printf("Transposed 2D array:\n");
    print_matrix(transposedArray, nCols);

    // Testing found_duplicate
    bool hasDuplicates = found_duplicate(array, SIZE);
    printf("Duplicate elements in array: %s\n", hasDuplicates ? "true" : "false");

    return 0;
}

// Checks if a given position is valid within the array bounds
bool isValid(const int array[], int length, int position) {
    return position >= 0 && position < length;
}

// Removes an element from the array at a specified position, shifting remaining elements left
void remove_element(int array[], int length, int position) {
    if (!isValid(array, length, position)) {
        printf("Error: Position %d is invalid for removal.\n", position);
        return;
    }
    for (int i = position; i < length - 1; i++) {
        array[i] = array[i + 1];
    }
}

// Inserts a new value into the array at a specified position, shifting elements to the right
void insert_element(int array[], int length, int position, int value) {
    if (!isValid(array, length, position) || length >= SIZE) {
        printf("Error: Position %d is invalid for insertion.\n", position);
        return;
    }
    for (int i = length; i > position; i--) {
        array[i] = array[i - 1];
    }
    array[position] = value;
}

// Reshapes a 1D array into a 2D matrix with specified number of rows and columns
void reshape(const int array[], int length, int numRows, int numCols, int reshapedMatrix[numRows][numCols]) {
    if (length != numRows * numCols) {
        printf("Error: Array length does not match product of numRows and numCols.\n");
        return;
    }
    for (int col = 0; col < numCols; col++) {
        for (int row = 0; row < numRows; row++) {
            reshapedMatrix[row][col] = array[col * numRows + row];
        }
    }
}

// Transposes a given matrix, swapping its rows and columns
void trans_matrix(int numRows, int numCols, const int matrix[numRows][numCols], int transposedMatrix[numCols][numRows]) {
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < numCols; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }
}

// Checks if there are any duplicate elements in the array
bool found_duplicate(int array[], int length) {
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (array[i] == array[j]) {
                return true;
            }
        }
    }
    return false;
}

// Prints a 1D array with each element and its index
void print_array(int array[], int length) {
    for (int i = 0; i < length; i++)
        printf("array[%d]= %d\n", i, array[i]);
}

// Prints a 2D matrix with each element and its row/column index
void print_matrix(int matrix[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++)
            printf("matrix[%d][%d]= %d\n", i, j, matrix[i][j]);
        puts("");
    }
}


